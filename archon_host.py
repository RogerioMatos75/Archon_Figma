# Nome do arquivo: archon_host.py

from flask import Flask, jsonify, request
from flask_socketio import SocketIO, emit
from flask_cors import CORS
import subprocess # M√≥dulo para executar comandos do terminal (o Gemini CLI)
import os # Para acessar vari√°veis de ambiente, se necess√°rio

# -------------------- CONFIGURA√á√ÉO INICIAL --------------------
app = Flask(__name__)
# A chave secreta √© necess√°ria para as sess√µes do SocketIO
# Recomenda-se usar uma vari√°vel de ambiente em produ√ß√£o
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'seu-segredo-super-secreto!')

# Habilita o CORS especificamente para a origem do Figma
# Permite credenciais para suportar cookies (se necess√°rio no futuro)
CORS(app, resources={r"/*": {"origins": "https://www.figma.com"}}, supports_credentials=True)


# Inicializa o SocketIO
# O modo ass√≠ncrono "threading" √© simples e suficiente para nosso caso de uso inicial
# Em produ√ß√£o, pode-se considerar eventlet ou gevent para maior escalabilidade
socketio = SocketIO(app, cors_allowed_origins="https://www.figma.com")


# -------------------- ROTAS E EVENTOS --------------------

@app.route('/')
def index():
    """ Rota b√°sica para verificar se o servidor est√° no ar. """
    return jsonify({"status": "Archon Host Local est√° no ar e aguardando conex√µes.", "version": "1.0"})

@socketio.on('connect')
def handle_connect():
    """ Evento disparado quando o plugin do Figma se conecta ao nosso host. """
    print('‚úÖ Plugin do Figma conectado com sucesso!')
    # Opcional: Enviar uma mensagem de volta para o plugin confirmando a conex√£o
    emit('host-status', {'status': 'connected', 'message': 'Conectado ao Archon Host Local'})

@socketio.on('disconnect')
def handle_disconnect():
    """ Evento disparado quando o plugin do Figma se desconecta. """
    print('üîå Plugin do Figma desconectado.')
    # Opcional: Lidar com a desconex√£o, limpar recursos, etc.

# --- Op√ß√£o A: Rota HTTP s√≠ncrona para teste do Gemini CLI ---
@app.route('/teste_gemini_sync', methods=['POST'])
def teste_gemini_sync():
    """
    Rota de teste s√≠ncrona para executar um comando b√°sico do Gemini CLI.
    Recebe um prompt e retorna o resultado diretamente.
    """
    data = request.json
    if not data or 'prompt' not in data:
        return jsonify({"error": "JSON inv√°lido ou 'prompt' ausente"}), 400

    prompt = data['prompt']
    print(f"üîÑ Recebido pedido de teste s√≠ncrono com prompt: {prompt}")

    try:
        # Construa o comando para o Gemini CLI
        # Assumindo que 'gemini' est√° no PATH e pronto para receber o prompt
        command = ["gemini", prompt]

        # Execute o comando no terminal
        # capture_output=True captura stdout e stderr
        # text=True decodifica a sa√≠da como texto
        # check=True levanta uma exce√ß√£o se o comando retornar um c√≥digo de erro
        result = subprocess.run(command, capture_output=True, text=True, check=True)

        print("‚úÖ Comando Gemini CLI executado com sucesso.")
        print("--- stdout ---")
        print(result.stdout)
        print("--- stderr ---")
        print(result.stderr)

        # Retorne a sa√≠da padr√£o do comando como resposta
        return jsonify({"status": "success", "output": result.stdout, "error": result.stderr}), 200

    except FileNotFoundError:
        print("‚ùå Erro: Comando 'gemini' n√£o encontrado. Certifique-se de que o Gemini CLI est√° instalado e no PATH.")
        return jsonify({"status": "error", "message": "Gemini CLI n√£o encontrado. Verifique a instala√ß√£o e o PATH."}), 500
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar o comando Gemini CLI: {e}")
        print("--- stdout ---")
        print(e.stdout)
        print("--- stderr ---")
        print(e.stderr)
        return jsonify({"status": "error", "message": f"Erro na execu√ß√£o do Gemini CLI: {e.stderr}", "output": e.stdout}), 500
    except Exception as e:
        print(f"‚ùå Ocorreu um erro inesperado: {e}")
        return jsonify({"status": "error", "message": f"Erro interno do servidor: {e}"}), 500


# Aqui adicionaremos os eventos WebSocket para a l√≥gica ass√≠ncrona (Op√ß√£o B)


# -------------------- EXECU√á√ÉO DO SERVIDOR --------------------

if __name__ == '__main__':
    print("üöÄ Iniciando o servidor Host Local do Archon em http://127.0.0.1:5001")
    print("Aguardando conex√µes do plugin do Figma...")
    # O host 0.0.0.0 torna o servidor acess√≠vel na sua rede local
    # Permite conex√µes de outras m√°quinas na mesma rede (√∫til para testes)
    # Em produ√ß√£o, considere restringir o host se necess√°rio
    socketio.run(app, host='0.0.0.0', port=5001, debug=True) # debug=True para desenvolvimento
